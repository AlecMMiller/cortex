/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SettingsImport } from './routes/settings'
import { Route as SchemasIndexImport } from './routes/schemas/index'
import { Route as SchemasUuidImport } from './routes/schemas/$uuid'
import { Route as NotesNoteIdImport } from './routes/notes/$noteId'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const SettingsRoute = SettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const SchemasIndexRoute = SchemasIndexImport.update({
  id: '/schemas/',
  path: '/schemas/',
  getParentRoute: () => rootRoute,
} as any)

const SchemasUuidRoute = SchemasUuidImport.update({
  id: '/schemas/$uuid',
  path: '/schemas/$uuid',
  getParentRoute: () => rootRoute,
} as any)

const NotesNoteIdRoute = NotesNoteIdImport.update({
  id: '/notes/$noteId',
  path: '/notes/$noteId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsImport
      parentRoute: typeof rootRoute
    }
    '/notes/$noteId': {
      id: '/notes/$noteId'
      path: '/notes/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof NotesNoteIdImport
      parentRoute: typeof rootRoute
    }
    '/schemas/$uuid': {
      id: '/schemas/$uuid'
      path: '/schemas/$uuid'
      fullPath: '/schemas/$uuid'
      preLoaderRoute: typeof SchemasUuidImport
      parentRoute: typeof rootRoute
    }
    '/schemas/': {
      id: '/schemas/'
      path: '/schemas'
      fullPath: '/schemas'
      preLoaderRoute: typeof SchemasIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/settings': typeof SettingsRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/schemas/$uuid': typeof SchemasUuidRoute
  '/schemas': typeof SchemasIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/settings': typeof SettingsRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/schemas/$uuid': typeof SchemasUuidRoute
  '/schemas': typeof SchemasIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/settings': typeof SettingsRoute
  '/notes/$noteId': typeof NotesNoteIdRoute
  '/schemas/$uuid': typeof SchemasUuidRoute
  '/schemas/': typeof SchemasIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/settings'
    | '/notes/$noteId'
    | '/schemas/$uuid'
    | '/schemas'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/settings' | '/notes/$noteId' | '/schemas/$uuid' | '/schemas'
  id:
    | '__root__'
    | '/'
    | '/settings'
    | '/notes/$noteId'
    | '/schemas/$uuid'
    | '/schemas/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  SettingsRoute: typeof SettingsRoute
  NotesNoteIdRoute: typeof NotesNoteIdRoute
  SchemasUuidRoute: typeof SchemasUuidRoute
  SchemasIndexRoute: typeof SchemasIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  SettingsRoute: SettingsRoute,
  NotesNoteIdRoute: NotesNoteIdRoute,
  SchemasUuidRoute: SchemasUuidRoute,
  SchemasIndexRoute: SchemasIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/settings",
        "/notes/$noteId",
        "/schemas/$uuid",
        "/schemas/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.tsx"
    },
    "/notes/$noteId": {
      "filePath": "notes/$noteId.tsx"
    },
    "/schemas/$uuid": {
      "filePath": "schemas/$uuid.tsx"
    },
    "/schemas/": {
      "filePath": "schemas/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
